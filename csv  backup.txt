import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'package:workmanager/workmanager.dart';
import 'package:permission_handler/permission_handler.dart';

void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    // Transfer CSV files to the server
    await transferCSVFiles();
    return Future.value(true);
  });
}

void main() {
  runApp(MyApp());
  Workmanager().initialize(callbackDispatcher);
  Workmanager().registerPeriodicTask(
    "1",
    "csv_transfer_task",
    frequency: Duration(minutes: 1), // Change frequency to 1 minute
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CSV File Transfer',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CSV File Transfer'),
      ),
      body: Center(
        child: Text('CSV files are being transferred periodically.'),
      ),
    );
  }
}

Future<void> transferCSVFiles() async {
  try {
    // Request storage permission
    await requestStoragePermission();

    // Get directory path for CSV files
    String directoryPath =
        '/storage/emulated/0/Android/data/com.example.pda_2/files/';
    String filePath = '$directoryPath/data_log.csv';
    File file = File(filePath);

    if (await file.exists()) {
      // Read file bytes
      List<int> bytes = await file.readAsBytes();

      // Post request to server
      final response = await http.post(
        Uri.parse('www.pradjna.in/pradjnapda/media/uploads'),
        body: bytes,
      );

      if (response.statusCode == 200) {
        print('File transferred successfully');
        // Delete file after transfer
        await file.delete();
      } else {
        print('Failed to transfer file');
      }
    } else {
      print('File does not exist');
    }
  } catch (e) {
    print('Error transferring CSV files: $e');
  }
}

// Request storage permission
Future<void> requestStoragePermission() async {
  var status = await Permission.storage.status;
  if (!status.isGranted) {
    status = await Permission.storage.request();
    if (!status.isGranted) {
      // Permission denied, handle accordingly
      print('Storage permission denied');
    }
  }
}
